#! /usr/bin/python

"""
This script is used to return the path to all leaf nodes of a JSON tree
Returns a JSON where each key = leaf node's path and value = leaf node's value.
"""

import json
import sys

class JSONLeaves:
	def json_paths(self, json_string):
		'''
		Given a JSON string (json_string) it returns a new JSON string whereby all:
		- keys are the paths to the leaf nodes of json_string
		- values are the values of these leaf nodes
		'''
		json_dict = json.JSONDecoder().decode(json_string)
		paths = self.dict_paths(json_dict)
		path_dict = {}
		for path in paths:
			path_dict[path[0]] = path[1]
		return json.dumps(path_dict, sort_keys=True, indent=4, separators=(',', ': '))

	def list_to_path(self, path_list):
		'''
		Takes a path in list form and converts it to a dot path
		e.g ["folder", "file"] become "folder.file"
		'''
		path = str(path_list[0])
		for item in path_list[1:len(path_list)]:
				path += "." + str(item)
		return path

	def dict_paths(self, dictionary, root = []):
		'''
		Takes a dictionary and returns a list of tuples where:
		the first element in the tuple is the path to all leave nodes in the dictionary and
		the second element in the tuple are the values of these leaf nodes

		'''
		if type(dictionary) is not dict:
			item_path = self.list_to_path(root)
			return [(item_path, dictionary)]

		paths = []
		root = list(root)
		for key, value in dictionary.items():
			sub_tree_root = root + [key]
			items =  self.dict_paths(value, sub_tree_root)
			for item in items:
				paths.append(item)
		return paths

json_terminal = JSONLeaves()
json_input = sys.stdin.read()
sys.stdout.write(json_terminal.json_paths(json_input))
sys.stdout.write("\n")